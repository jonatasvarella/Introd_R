# ---
# INTRODUCAO AO R - Aula 2.2
# ---
# ---
# Instrutor:
#
# Fernando Meireles
# www.fmeireles.com
# ---
# Ate' agora, vimos como abrir a maioria dos tipos de arquivo usados para armazenar dados e como manipular
# de forma simples bancos de dados (data.frames). Daqui para a frente, veremos como usar o pacote dplyr,
# para manipular data.frames de forma mais avancada. Especificamente, aprenderemos
# a usar as quatro principais operacoes, ou verbos, para manipular dados no R, quais sejam:
# 1) Fatiar (filter e slice, operacoes horizontais)
# 2) Selecionar (select, operacoes verticais)
# 3) Modificar (mutate e summarise, para criar e modificar variaveis e observacoes)
# Tendo este conteudo dominado, saberemos como realizar uns 90% de todas as tarefas mais comuns
# numa analise de dados (na verdade, precisaremos saber agrupar dados, mas isso cobriremos
# na proxima aula).
# Para comecar, vamos carregar o tidyverse
library(tidyverse)
# Tambem vamos precisar de alguns dados. Aqui, usaremos alguns meta-dados de um periodico hospedado no Scielo.
# Os dados estao no arquivo 'base_scielo.txt', e podem ser carregados
# com read_delim (o separador e' ponto e virgula):
dados <- read_delim("base_scielo.txt", delim = ";")
glimpse(dados) # para entendermos os dados
str(dados)
# Vamos comecar pelas operacoes de fatiamento dos dados. O tidyver oferece duas principais
# funcoes para realizar este tipo de operacao: filter() e slice(). A primeira filtra observacoes de
# um banco de acordo com um criterio (ex., ficar apenas com observacoes onde o valor da variavel x e' maior que 10);
# ja' a segunda funcao, slice, nos permite selecionar observacoes pela ordem (ex., ficar apenas com as 10 primeiras).
# O codigo abaixo filtra os artigos pelo numero de paginas, ficando apenas com aqueles com menos de 10 paginas:
nrow(dados) # a base tem 288 observacoes
dados <- filter(dados, n_pages < 10) # fica apenas com artigos com menos de 10 paginas
nrow(dados) # a base agora tem 280 observacoes
# O jeito como a funcao filter funciona e' bastante simples. Primeiro, passamos a base que queremos
# filtrar como primeiro argumento da funcao (no caso, 'dados'); depois, colocamos a condicao que queremos
# testar. Todas as observacoes que atendam a condicao (TRUE) ficam na base; as que nao antendem, sao descartadas.
# Vamos ver outros exemplos:
dados <- filter(dados, n_pages > 3 & n_pages < 9) # fica com artigos com mais de 3 paginas e menos de 9
dados <- filter(dados, n_authors < 10 | n_pages >= 4) # fica com artigos com menos de 10 autores
# ou com mais de 5 paginas
dados <- filter(dados, year == 2004) # fica apenas com artigos publicado em 2004
dados <- filter(dados, n_authors != 2) # fica apenas com artigos com qualquer numero de autores/as, menos 2
nrow(dados) # ficamos agora com apenas 41 observacoes
# slice() funciona de um jeito mais simples: precisamos especificar a posicao das linhas que queremos manter.
# Vamos carregar novamente os dados para usar a funcao.
dados <- read_delim("base_scielo.txt", delim = ";")
dados
dados <- slice(dados, 1:100)
dados
dados <- slice(dados, 1:100,)
dados <- read_delim("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/base_scielo.txt", delim = ";")
# ---
# INTRODUCAO AO R - Aula 2.2
# ---
# ---
# Instrutor:
#
# Fernando Meireles
# www.fmeireles.com
# ---
# Ate' agora, vimos como abrir a maioria dos tipos de arquivo usados para armazenar dados e como manipular
# de forma simples bancos de dados (data.frames). Daqui para a frente, veremos como usar o pacote dplyr,
# para manipular data.frames de forma mais avancada. Especificamente, aprenderemos
# a usar as quatro principais operacoes, ou verbos, para manipular dados no R, quais sejam:
# 1) Fatiar (filter e slice, operacoes horizontais)
# 2) Selecionar (select, operacoes verticais)
# 3) Modificar (mutate e summarise, para criar e modificar variaveis e observacoes)
# Tendo este conteudo dominado, saberemos como realizar uns 90% de todas as tarefas mais comuns
# numa analise de dados (na verdade, precisaremos saber agrupar dados, mas isso cobriremos
# na proxima aula).
# Para comecar, vamos carregar o tidyverse
library(tidyverse)
# Tambem vamos precisar de alguns dados. Aqui, usaremos alguns meta-dados de um periodico hospedado no Scielo.
# Os dados estao no arquivo 'base_scielo.txt', e podem ser carregados
# com read_delim (o separador e' ponto e virgula):
dados <- read_delim("base_scielo.txt", delim = ";")
glimpse(dados) # para entendermos os dados
str(dados)
# Vamos comecar pelas operacoes de fatiamento dos dados. O tidyver oferece duas principais
# funcoes para realizar este tipo de operacao: filter() e slice(). A primeira filtra observacoes de
# um banco de acordo com um criterio (ex., ficar apenas com observacoes onde o valor da variavel x e' maior que 10);
# ja' a segunda funcao, slice, nos permite selecionar observacoes pela ordem (ex., ficar apenas com as 10 primeiras).
# O codigo abaixo filtra os artigos pelo numero de paginas, ficando apenas com aqueles com menos de 10 paginas:
nrow(dados) # a base tem 288 observacoes
dados <- filter(dados, n_pages < 10) # fica apenas com artigos com menos de 10 paginas
nrow(dados) # a base agora tem 280 observacoes
# O jeito como a funcao filter funciona e' bastante simples. Primeiro, passamos a base que queremos
# filtrar como primeiro argumento da funcao (no caso, 'dados'); depois, colocamos a condicao que queremos
# testar. Todas as observacoes que atendam a condicao (TRUE) ficam na base; as que nao antendem, sao descartadas.
# Vamos ver outros exemplos:
dados <- filter(dados, n_pages > 3 & n_pages < 9) # fica com artigos com mais de 3 paginas e menos de 9
dados <- filter(dados, n_authors < 10 | n_pages >= 4) # fica com artigos com menos de 10 autores
# ou com mais de 5 paginas
dados <- filter(dados, year == 2004) # fica apenas com artigos publicado em 2004
dados <- filter(dados, n_authors != 2) # fica apenas com artigos com qualquer numero de autores/as, menos 2
nrow(dados) # ficamos agora com apenas 41 observacoes
# slice() funciona de um jeito mais simples: precisamos especificar a posicao das linhas que queremos manter.
# Vamos carregar novamente os dados para usar a funcao.
dados <- read_delim("base_scielo.txt", delim = ";")
dados <- slice(dados, 1:100) # fica apenas com as 100 primeiras observacoes
dados <- slice(dados, c(1, 5, 10)) # agora, fica apenas com a 1, a 5 e a 10 observacao do que sobrou
# Note que podemos usar a funcao filter para especificarmos a negacao de uma condicao. Basta usar
# o operador ! na frente da condicao (! nega tudo o que vem depois).
TRUE # verdadeiro
!TRUE # inverso de verdadeiro, FALSE
dados <- read_delim("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/base_scielo.txt", delim = ";")
rm(list = ls())
install.packages("tidyverse")
install.packages("tidyverse")
# Como na aula anterior, tambem precisaremos carregar esses pacotes. Usamos 'library':
library(tidyverse)
library(readxl)
library(haven)
library(rio)
read.delim("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/base_scielo.txt", delim = "   ")
read_delim("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/base_scielo.txt", delim = "   ")
bd = read_delim("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/base_scielo.txt", delim = "   ")
source('~/Desktop/Jonatas/GitHub/Introd_R/Introd_R/1_Aulas/aula_2/aula_2_1.R', echo=TRUE)
banco2 <- read_delim("municipios_mg2.txt", delim = ";")
# O tipo de arquivo mais comum para salvar dados, entretanto, e' .csv
banco3 <- read_csv("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/municipios_mg.csv")
# O tipo de arquivo mais comum para salvar dados, entretanto, e' .csv
banco3 <- read_csv2("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/municipios_mg.csv")
# O tipo de arquivo mais comum para salvar dados, entretanto, e' .csv
banco3 <- read_csv("https://github.com/jonatasvarella/Introd_R/raw/master/1_Aulas/aula_2/municipios_mg.csv")
banco <- data.frame(x = 1:100, y = 100:1)
library(tidyverse)
data("iris")
names(iris)
glimpse(iris)
str(iris)
nrow(dados)
# Feito isso, podemos começar com algumas manipulações simples.
# Para saber o número de linhas de um banco de dados:
nrow(iris)
dim(iris)
# Para visualizar as primeiras colunas
head(iris)
# Para visualizar as últimas colunas
tail(iris)
class(iris[[1]])
names(iris)
class(iris$Sepal.Length)
iris
# Com a função summary() é possível tirar estátisticas descritivas de todo o banco.
summary(iris)
# O mesmo pode ser feito para as variáveis de forma separada
summary(iris$Sepal.Length)
summary(iris[[2]])
summary(iris[[1]])
summary(iris[[2]])
# O mesmo pode ser feito para as variáveis de forma separada
summary(iris$Sepal.Length)
# Podemos também analisar apenas algumas estatísticas que nos interessa:
# Para a média:
mean(iris$Petal.Length)
# Para a mediana:
median(iris$Petal.Length)
# Para a variância:
var(iris$Petal.Length)
# Para a desvio padrão:
sd(iris$Petal.Length)
cor(iris[1:4])
cor(iris[,1:4])
# Para correlacionar apenas duas variáveis:
cor(iris$Sepal.Length, iris$Petal.Length)
# Para fazer uma correlação com teste estatístico
cor.test(iris$Sepal.Length, iris$Petal.Length)
# Para iniciar, vamos tirar a notação científica do tipo 2e-16:
options(scipen = 999)
# Para fazer uma correlação com teste estatístico
cor.test(iris$Sepal.Length, iris$Petal.Length)
# E se quisermos visualizar essa correlação?
plot(iris$Sepal.Length, iris$Petal.Length)
# Até então, vimos algumas análises apenas paras as variáveis númericas.
# E no caso de uma variável fator?
class(iris$Species)
library(descr)
# A função que vamos utilizar é a freq(). Ela é utilzada para gerar uma tabela de frequência de uma variável.
freq(iris$Species)
# Perceba que ao lado, foi gerado um gráfico automatico. Para que isso não acontença,
# basta utilizar um parametro da função:
freq(iris$Species, plot = F)
banco_setosa = filter(iris$Species == "setosa")
banco_setosa = filter(iris, Species == "setosa")
summary(iris)
iris
novo_banco = filter(iris, Sepal.Lenght > 4.5 )
names(iris)
novo_banco = filter(iris, Sepal.Length > 4.5 )
